package com.hpe.adm.nga.sdk.enums;

import java.util.Arrays;

import javax.annotation.Generated;

import com.hpe.adm.nga.sdk.model.EntityModel;
import com.hpe.adm.nga.sdk.model.StringFieldModel;

/**
 * Generated class - do not edit!
 */
@Generated("sdk-generate-entity-models-maven-plugin")
public final class Lists {

#foreach($listItemsSet in ${listNodes.entrySet()})
    #set($listItems = $listItemsSet.getValue())
    #set($rootModel = $listItems.get(0))
    #set($rootModelName = ${rootModel[0]})

    /**
     * #if($listItems.size() <= 1)EMPTY! #end${rootModel[2]}
     */
    #if($rootModel[3] == "1")
    @Deprecated
    #end
    public enum $rootModelName {
        #foreach($listModel in $listItems)#if(!$foreach.first)
        /**
         * ${listModel[2]}
         */
        #if($listModel[3] == "1")
        @Deprecated
        #end
        ${listModel[0]}("${listModel[1]}", "${listModel[2]}")#if($foreach.hasNext),#else;#end
        #end#end

        #if($listItems.size() <= 1)
        /**
         * List is empty!
         * @deprecated this list should be regenerated
         */
        DEADBEEF("$rootModelName is empty!!");
        #end

        public static final String ROOT_ID = "${rootModel[1]}";

        private final String id;
        private final String value;

        $rootModelName(final String id) {
            this.id = id;
            this.value = "DEADBEEF";
        }
        
        $rootModelName(final String id, final String value) {
            this.id = id;
            this.value = value;
        }

        public final String getId() {
            return id;
        }

        public final String getValue() {
            return value;
        }

        public static $rootModelName getListNodeFromId(final String id) {
            return Arrays.stream(${rootModelName}.values()).filter(listNode -> listNode.getId().equals(id)).findFirst().orElse(null);
        }

        public static $rootModelName getListNodeFromValue(final String value) {
            return Arrays.stream(${rootModelName}.values()).filter(listNode -> listNode.getValue().equalsIgnoreCase(value)).findFirst().orElse(null);
        }

        public final EntityModel getAsEntityModel() {
            final EntityModel entityModel = new EntityModel();
            entityModel.setValue(new StringFieldModel("id", id));
            entityModel.setValue(new StringFieldModel("type", "list_node"));
            return entityModel;
        }

        public static $rootModelName getFromEntityModel(final EntityModel entityModel) {
            return ${rootModelName}.getListNodeFromId(entityModel.getId());
        }
    }
#end
}
